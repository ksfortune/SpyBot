import asyncio
import random
import logging
import stickers
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

# –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = ''

logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


def player_start_game():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé¢ –í—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É", callback_data="enter_game")],
        [InlineKeyboardButton(text="üö® –†–∞–∑–¥–∞—Ç—å —Ä–æ–ª–∏", callback_data="give_roles")]
    ])


def player_get_role():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª—å", callback_data="get_role")],
        [InlineKeyboardButton(text="üíÄ –í—ã–±—ã–ª", callback_data="delete_player")],
        [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data="end_game")]
    ])


@dp.message(CommandStart())
async def start_cmd(message: types.Message, state: FSMContext):
    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ùå –≠—Ç–∞ –∏–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!", reply_markup=ReplyKeyboardRemove())
        return

    admins = await get_admin_ids(message.chat.id)
    data = await state.get_data()
    game_started = data.get("game_started", False)

    if message.from_user.id in admins:
        if not game_started:
            msg = await message.answer(
                "üî• –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
                "–ù–∏–∂–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ ‚Äî –∂–º–∏, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É. –ö—Ç–æ-—Ç–æ —Å—Ç–∞–Ω–µ—Ç —à–ø–∏–æ–Ω–æ–º... üëÄ",
                reply_markup=player_start_game()
            )
            sticker_id = random.choice(stickers.sticks)
            await message.answer_sticker(sticker_id)
            await bot.pin_chat_message(message.chat.id, msg.message_id)
            await state.update_data(
                game_started=True,
                ADMINS=admins,
                PLAYERS=[],
                SPIES=[],
                PINNED_MESSAGE_ID=msg.message_id
            )
        else:
            await message.answer("üé≤ –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
    else:
        await message.answer(f"–•—ç–π, @{message.from_user.username}! üëã\n"
            "–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –Ω–æ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è. –ñ–¥–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –≤–µ–¥—É—â–µ–≥–æ! üéÆ")
    return


@dp.callback_query(F.data == "enter_game")
async def enter_game(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    players = data.get("PLAYERS", [])
    admins = data.get("ADMINS", [])
    user_id = callback.from_user.id

    if user_id in admins:
        await callback.answer("üëÆ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–†–∞–∑–¥–∞—Ç—å —Ä–æ–ª–∏' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã",
                              show_alert=True)
        return

    if user_id not in players:
        players.append(user_id)
        await state.update_data(PLAYERS=players)
        await callback.message.answer(f"‚úÖ @{callback.from_user.username or user_id}, —Ç—ã —Ç–µ–ø–µ—Ä—å –≤ –∏–≥—Ä–µ! üïπÔ∏è")
    else:
        await callback.answer("üëÄ –¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!", show_alert=True)
    return


@dp.callback_query(F.data == "give_roles")
async def give_roles(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    players = data.get("PLAYERS", [])
    admins = data.get("ADMINS", [])
    user_id = callback.from_user.id

    if user_id not in admins:
        await callback.answer("üëÆ –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞–µ—Ç –ê–¥–º–∏–Ω!", show_alert=True)
        return

    if len(players) < 3:
        await callback.answer("üôÖ‚Äç‚ôÇÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3.", show_alert=True)
        return

    spies_count = max(1, len(players) * 20 // 100)
    spies = random.sample(players, spies_count)
    await state.update_data(SPIES=spies)

    pinned_id = data.get("PINNED_MESSAGE_ID")
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=pinned_id,
        text="üõë –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\nüîí –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ!\nüïµÔ∏è –ö—Ç–æ-—Ç–æ —Ç–µ–ø–µ—Ä—å —à–ø–∏–æ–Ω... –ù–µ –¥–æ–≤–µ—Ä—è–π –Ω–∏–∫–æ–º—É!",
        reply_markup=player_get_role()
    )
    return


@dp.callback_query(F.data == "get_role")
async def get_role(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    spies = data.get("SPIES", [])
    admins = data.get("ADMINS", [])
    user_id = callback.from_user.id

    if user_id in admins:
        s = []
        for spy in spies:
            user = await bot.get_chat(spy)
            s.append(user.username)
        await callback.answer(f"üïµÔ∏è –®–ø–∏–æ–Ω—ã: {', '.join(str(i) for i in s)}",
                              show_alert=False)
    elif user_id in spies:
        await callback.answer("üïµÔ∏è‚Äç‚ôÇÔ∏è –¢–≤–æ—è —Ä–æ–ª—å: –®–ø–∏–æ–Ω!", show_alert=False)
    else:
        await callback.answer("üßë‚Äçüåæ –¢–≤–æ—è —Ä–æ–ª—å: –ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å!", show_alert=False)


@dp.callback_query(F.data == "delete_player")
async def leave_game(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    players = data.get("PLAYERS", [])
    spies = data.get("SPIES", [])
    user_id = callback.from_user.id
    admins = data.get("ADMINS", [])

    if user_id in admins:
        await callback.answer("üëÄ –ê–¥–º–∏–Ω –Ω–µ –±—Ä–æ—Å–∞–π –∏–≥—Ä–æ–∫–æ–≤!", show_alert=True)
        return

    if user_id in players:
        players.remove(user_id)
        role = "–®–ø–∏–æ–Ω" if user_id in spies else "–ú–∏—Ä–Ω—ã–π"
        if user_id in spies:
            spies.remove(user_id)
        await state.update_data(PLAYERS=players, SPIES=spies)
        await callback.message.answer(f"‚ùå @{callback.from_user.username} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.\nüé≠ –ï–≥–æ —Ä–æ–ª—å –±—ã–ª–∞: {role}\n\n"
                f"üßÆ –û—Å—Ç–∞–ª–æ—Å—å:\nüïµÔ∏è –®–ø–∏–æ–Ω–æ–≤ ‚Äî {len(spies)}\nüßë‚Äçüåæ –ú–∏—Ä–Ω—ã—Ö ‚Äî {len(players) - len(spies)}")
    else:
        await callback.answer("–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ.", show_alert=True)
    return


@dp.callback_query(F.data == "end_game")
async def end_game(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    admins = data.get("ADMINS", [])
    pinned_id = data.get("PINNED_MESSAGE_ID")

    if user_id not in admins:
        await callback.answer("–≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ üòú", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üïµÔ∏è –ü–æ–±–µ–¥–∏–ª–∏ —à–ø–∏–æ–Ω—ã", callback_data="spies_win")],
        [InlineKeyboardButton(text="üßë‚Äçüåæ –ü–æ–±–µ–¥–∏–ª–∏ –º–∏—Ä–Ω—ã–µ", callback_data="civilians_win")]
    ])
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=pinned_id,
        text="–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–πü§©"
    )
    await bot.unpin_chat_message(chat_id=callback.message.chat.id, message_id=pinned_id)
    end_game_message = await callback.message.answer(
        "üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nü§î –ö—Ç–æ –∂–µ –ø–æ–±–µ–¥–∏–ª?", reply_markup=keyboard)
    await bot.pin_chat_message(chat_id=callback.message.chat.id,
                               message_id=end_game_message.message_id)
    return


@dp.callback_query(F.data.in_(["spies_win", "civilians_win"]))
async def announce_winner(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    admins = data.get("ADMINS", [])
    pinned_id = data.get("PINNED_MESSAGE_ID")

    if user_id not in admins:
        await callback.answer("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!", show_alert=True)
        return

    winner = "üïµÔ∏è –®–ø–∏–æ–Ω—ã" if callback.data == "spies_win" else "üßë‚Äçüåæ –ú–∏—Ä–Ω—ã–µ"
    await callback.message.answer(f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {winner}!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! ü•≥")
    sticker_id = random.choice(stikers.sticks)
    await callback.message.answer(sticker_id)
    await bot.unpin_chat_message(chat_id=callback.message.chat.id, message_id=pinned_id)
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=pinned_id)
    await state.clear()
    return


@dp.message(Command("end"))
async def end_game_cmd(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id

    admins = data.get("ADMINS", [])
    game_started = data.get("game_started", False)
    pinned_message_id = data.get("PINNED_MESSAGE_ID", None)

    if user_id in admins and game_started:

        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=pinned_message_id,
            text="–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –≤–µ–¥—É—â–µ–≥–æ! üéÆ"
        )

        await bot.unpin_chat_message(chat_id=message.chat.id,
                                     message_id=pinned_message_id)
        await state.update_data(game_started=False, PINNED_MESSAGE_ID=None)

        await message.answer("üöÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")
    else:
        await message.answer(
            "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –∏–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")


async def get_admin_ids(chat_id: int) -> list[int]:
    members = await bot.get_chat_administrators(chat_id)
    return [admin.user.id for admin in members]


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
