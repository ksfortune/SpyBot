#!/usr/bin/python3

import asyncio
import random
import sys
import stickers
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.filters import Command
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.ERROR
)
logger = logging.getLogger(__name__)

#–¥–æ–±–∞–≤–∏—Ç—å API_TOKEN
API_TOKEN = ''

PLAYERS = []
SPIES = []
ADMINS = []
game_started = False
roles_given = False
PINNED_MESSAGE_ID = None

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


def player_start_game():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé¢ –í—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É", callback_data="enter_game")],
        [InlineKeyboardButton(text="üö® –†–∞–∑–¥–∞—Ç—å —Ä–æ–ª–∏", callback_data="give_roles")]
    ])


def player_get_role():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª—å", callback_data="get_role")],
        [InlineKeyboardButton(text="üíÄ –í—ã–±—ã–ª", callback_data="delete_player")],
        [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data="end_game")]
    ])


@dp.callback_query(F.data == "enter_game")
async def enter_new_gamer(callback: types.CallbackQuery):
    global PLAYERS
    user_id = callback.from_user.id
    if user_id in ADMINS:
        await callback.answer("üëÆ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–†–∞–∑–¥–∞—Ç—å —Ä–æ–ª–∏' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã",
                              show_alert=True)
        return

    if user_id not in PLAYERS:
        PLAYERS.append(user_id)
        username = callback.from_user.username or "–±—É–¥—É—â–∏–π —Ñ—É–ª–ª"
        await callback.message.answer(
            f"‚úÖ @{username}, —Ç—ã —Ç–µ–ø–µ—Ä—å –≤ –∏–≥—Ä–µ! üïπÔ∏è",
        )
    else:
        await callback.answer("üëÄ –¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!", show_alert=True)


@dp.callback_query(F.data == "give_roles")
async def give_new_roles(callback: types.CallbackQuery):
    global PLAYERS
    global SPIES
    if game_started:
        user_id = callback.from_user.id
        if user_id in ADMINS:
            if len(PLAYERS) < 3:
                await callback.answer("üôÖ‚Äç‚ôÇÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3.",
                                      show_alert=True)
                return
            spy_count = max(1, len(PLAYERS) * 20 // 100)
            SPIES = random.sample(PLAYERS, spy_count)
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=PINNED_MESSAGE_ID,
                text="üõë –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\nüîí –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ!\nüïµÔ∏è –ö—Ç–æ-—Ç–æ —Ç–µ–ø–µ—Ä—å —à–ø–∏–æ–Ω... –ù–µ –¥–æ–≤–µ—Ä—è–π –Ω–∏–∫–æ–º—É!",
                reply_markup=player_get_role()
            )
            return

        else:
            await callback.answer("üëÆ –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞–µ—Ç –ê–¥–º–∏–Ω!", show_alert=True)


@dp.callback_query(F.data == "get_role")
async def get_new_roles(callback: types.CallbackQuery):
    if game_started:
        user_id = callback.from_user.id

        if user_id in ADMINS:
            s = []
            for spy in SPIES:
                user = await bot.get_chat(spy)
                s.append(user.username)
            await callback.answer(f"üïµÔ∏è –®–ø–∏–æ–Ω—ã: {', '.join(str(i) for i in s)}",
                                  show_alert=False)
        else:
            if user_id in SPIES:
                await callback.answer("üïµÔ∏è‚Äç‚ôÇÔ∏è –¢–≤–æ—è —Ä–æ–ª—å: –®–ø–∏–æ–Ω!", show_alert=False)
            else:
                await callback.answer("üßë‚Äçüåæ –¢–≤–æ—è —Ä–æ–ª—å: –ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å!", show_alert=False)


@dp.callback_query(F.data == "delete_player")
async def delete_roles(callback: types.CallbackQuery):
    if game_started:
        global PLAYERS
        global SPIES
        user_id = callback.from_user.id
        if user_id in ADMINS:
            await callback.answer("üëÄ –ê–¥–º–∏–Ω –Ω–µ –±—Ä–æ—Å–∞–π –∏–≥—Ä–æ–∫–æ–≤!", show_alert=True)
        else:
            role = "–ú–∏—Ä–Ω—ã–π"
            if user_id in SPIES:
                role = "–®–ø–∏–æ–Ω"
                SPIES.remove(user_id)
            PLAYERS.remove(user_id)

            await callback.message.answer(
                f"‚ùå @{callback.from_user.username} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.\nüé≠ –ï–≥–æ —Ä–æ–ª—å –±—ã–ª–∞: {role}\n\n"
                f"üßÆ –û—Å—Ç–∞–ª–æ—Å—å:\nüïµÔ∏è –®–ø–∏–æ–Ω–æ–≤ ‚Äî {len(SPIES)}\nüßë‚Äçüåæ –ú–∏—Ä–Ω—ã—Ö ‚Äî {len(PLAYERS) - len(SPIES)}"
            )


@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    global PINNED_MESSAGE_ID
    global game_started

    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ùå –≠—Ç–∞ –∏–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!",
                             reply_markup=ReplyKeyboardRemove())
        return

    admins = await get_admin_ids(message.chat.id)

    if message.from_user.id in admins:
        if not game_started:
            PINNED_MESSAGE = await message.answer(
                "üî• –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
                "–ù–∏–∂–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ ‚Äî –∂–º–∏, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É. –ö—Ç–æ-—Ç–æ —Å—Ç–∞–Ω–µ—Ç —à–ø–∏–æ–Ω–æ–º... üëÄ",
                reply_markup=player_start_game()
            )
            PINNED_MESSAGE_ID = PINNED_MESSAGE.message_id
            try:
                await bot.pin_chat_message(
                    chat_id=message.chat.id,
                    message_id=PINNED_MESSAGE_ID,
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            game_started = True
        else:
            await message.answer("üé≤ –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
    elif not game_started:
        await message.answer(
            f"–•—ç–π, @{message.from_user.username}! üëã\n"
            "–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –Ω–æ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è. –ñ–¥–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –≤–µ–¥—É—â–µ–≥–æ! üéÆ"
        )
    else:
        sticker_id = random.choice(stikers.sticks)
        await message.answer_sticker(sticker_id)


@dp.callback_query(F.data == "end_game")
async def end_game(callback: types.CallbackQuery):
    global PINNED_MESSAGE_ID
    if game_started:
        chat_id = callback.message.chat.id
        user_id = callback.from_user.id

        if user_id not in ADMINS:
            await callback.answer("–≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ üòú", show_alert=False)
            return

        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üïµÔ∏è –ü–æ–±–µ–¥–∏–ª–∏ —à–ø–∏–æ–Ω—ã",
                                      callback_data="spies_win")],
                [InlineKeyboardButton(text="üßë‚Äçüåæ –ü–æ–±–µ–¥–∏–ª–∏ –º–∏—Ä–Ω—ã–µ",
                                      callback_data="civilians_win")]
            ])

            MESSAGE = await callback.message.answer(
                "üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nü§î –ö—Ç–æ –∂–µ –ø–æ–±–µ–¥–∏–ª?",
                reply_markup=keyboard
            )
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=PINNED_MESSAGE_ID,
                text="–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–πü§©\n\n"
            )
            await bot.unpin_chat_message(chat_id=chat_id, message_id=PINNED_MESSAGE_ID)
            PINNED_MESSAGE_ID = MESSAGE.message_id
            await callback.answer()


@dp.callback_query(F.data.in_(["spies_win", "civilians_win"]))
async def declare_winner(callback: types.CallbackQuery):
    global game_started, roles_given, PINNED_MESSAGE_ID
    if game_started:
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if user_id not in ADMINS:
            await callback.answer("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!",
                                  show_alert=True)
            return
        winner = "üïµÔ∏è –®–ø–∏–æ–Ω—ã" if callback.data == "spies_win" else "üßë‚Äçüåæ –ú–∏—Ä–Ω—ã–µ"
        await callback.message.answer(
            f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {winner}!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! ü•≥"
        )
        await bot.unpin_chat_message(chat_id=callback.message.chat.id,
                                     message_id=PINNED_MESSAGE_ID)
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=PINNED_MESSAGE_ID)
        sticker_id = random.choice(stikers.sticks)
        await callback.message.answer_sticker(sticker_id)

        PLAYERS.clear()
        SPIES.clear()
        game_started = False
        roles_given = False
        PINNED_MESSAGE_ID = None

        await callback.answer()


async def get_admin_ids(chat_id: int) -> list[int]:
    global ADMINS
    admins = await bot.get_chat_administrators(chat_id)
    ADMINS = [admin.user.id for admin in admins]
    return ADMINS


@dp.message(Command("end"))
async def end_game_cmd(message: types.Message):
    user_id = message.from_user.id
    global game_started, roles_given, PINNED_MESSAGE_ID
    if user_id in ADMINS and game_started:
        global PLAYERS
        global SPIES
        PLAYERS.clear()
        SPIES.clear()
        game_started = False
        roles_given = False
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=PINNED_MESSAGE_ID,
            text=f"–ò–≥—Ä—É –∑–∞–≤–µ—Ä—à–∏–ª–∏! –ñ–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –≤–µ–¥—É—â–µ–≥–æ! üéÆ",
        )
        await bot.unpin_chat_message(chat_id=message.chat.id,
                                     message_id=PINNED_MESSAGE_ID)
        PINNED_MESSAGE_ID = None
        await message.answer("üöÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
